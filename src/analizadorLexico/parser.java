
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorLexico;

import java_cup.runtime.*;
import analizadorLexico.backend.*;
import analizadorLexico.sym;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\005\003\000\002\012" +
    "\003\000\002\013\005\000\002\013\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\003\000\002\014\003\000" +
    "\002\015\003\000\002\016\003\000\002\017\005\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\021" +
    "\005\000\002\022\005\000\002\022\003\000\002\023\003" +
    "\000\002\023\003\000\002\024\005\000\002\025\005\000" +
    "\002\026\003\000\002\026\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\030\005\000\002\031" +
    "\003\000\002\031\005\000\002\032\003\000\002\033\005" +
    "\000\002\034\005\000\002\034\003\000\002\035\003\000" +
    "\002\036\003\000\002\036\003\000\002\037\005\000\002" +
    "\040\005\000\002\040\003\000\002\041\003\000\002\042" +
    "\005\000\002\043\003\000\002\043\003\000\002\044\003" +
    "\000\002\045\005\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\047\007\000\002" +
    "\047\005\000\002\050\007\000\002\051\003\000\002\051" +
    "\003\000\002\052\005\000\002\052\005\000\002\052\005" +
    "\000\002\052\005\000\002\052\005\000\002\052\005\000" +
    "\002\052\004\000\002\052\004\000\002\052\004\000\002" +
    "\052\004\000\002\052\004\000\002\052\004\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\053\003" +
    "\000\002\053\003\000\002\054\003\000\002\055\003\000" +
    "\002\056\003\000\002\007\004\000\002\007\003\000\002" +
    "\010\004\000\002\006\004\000\002\006\003\000\002\011" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\030\004\023\005\005\014\020\017\033\020" +
    "\022\021\021\022\007\025\012\026\031\033\006\035\004" +
    "\001\002\000\004\002\uffa4\001\002\000\006\002\ufff0\034" +
    "\035\001\002\000\004\034\035\001\002\000\004\034\035" +
    "\001\002\000\004\002\000\001\002\000\004\002\ufff5\001" +
    "\002\000\004\034\035\001\002\000\004\002\105\001\002" +
    "\000\004\002\ufffa\001\002\000\004\002\ufff6\001\002\000" +
    "\004\002\ufffc\001\002\000\004\002\ufffe\001\002\000\004" +
    "\034\035\001\002\000\004\034\035\001\002\000\004\034" +
    "\035\001\002\000\004\002\ufff2\001\002\000\004\002\ufff7" +
    "\001\002\000\004\002\ufff4\001\002\000\004\002\ufffb\001" +
    "\002\000\004\002\ufff9\001\002\000\004\002\ufffd\001\002" +
    "\000\004\034\035\001\002\000\004\002\ufff8\001\002\000" +
    "\004\034\035\001\002\000\010\027\037\032\036\034\041" +
    "\001\002\000\040\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012" +
    "\uffa5\013\uffa5\015\uffa5\016\uffa5\023\uffa5\024\uffa5\027\uffa5" +
    "\030\uffa5\031\uffa5\032\uffa5\034\uffa5\001\002\000\006\002" +
    "\uffe2\034\uffe2\001\002\000\004\032\050\001\002\000\006" +
    "\002\uffe3\034\uffe3\001\002\000\040\006\uffa6\007\uffa6\010" +
    "\uffa6\011\uffa6\012\uffa6\013\uffa6\015\uffa6\016\uffa6\023\uffa6" +
    "\024\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\034\uffa6\001" +
    "\002\000\006\002\uffe5\034\035\001\002\000\010\002\uffe1" +
    "\027\037\034\uffe1\001\002\000\010\002\uffa8\027\uffa8\034" +
    "\uffa8\001\002\000\010\002\uffa9\027\uffa9\034\uffa9\001\002" +
    "\000\010\027\037\032\036\034\041\001\002\000\006\002" +
    "\uffe4\034\uffe4\001\002\000\010\002\uffa7\027\uffa7\034\uffa7" +
    "\001\002\000\014\015\055\016\054\027\037\032\053\034" +
    "\041\001\002\000\004\002\uffc7\001\002\000\004\002\uffc5" +
    "\001\002\000\004\002\uffc4\001\002\000\004\002\uffc3\001" +
    "\002\000\006\002\uffc6\027\037\001\002\000\010\023\061" +
    "\032\060\034\041\001\002\000\004\002\uffd8\001\002\000" +
    "\004\034\uffd6\001\002\000\004\002\uffd9\001\002\000\004" +
    "\034\035\001\002\000\006\027\037\034\041\001\002\000" +
    "\006\002\uffd7\027\037\001\002\000\010\027\037\032\067" +
    "\034\041\001\002\000\006\002\uffdd\034\uffdd\001\002\000" +
    "\004\034\035\001\002\000\004\002\uffe0\001\002\000\010" +
    "\002\uffde\027\037\034\uffde\001\002\000\014\015\074\016" +
    "\077\027\037\032\067\034\041\001\002\000\004\002\uffda" +
    "\001\002\000\004\002\uffdf\001\002\000\004\002\uffdc\001" +
    "\002\000\004\002\uffdb\001\002\000\012\015\101\016\102" +
    "\027\037\034\041\001\002\000\004\002\uffe8\001\002\000" +
    "\004\002\uffe7\001\002\000\004\002\uffe9\001\002\000\006" +
    "\002\uffe6\027\037\001\002\000\004\002\001\001\002\000" +
    "\012\024\107\027\037\032\111\034\041\001\002\000\004" +
    "\034\uffd2\001\002\000\004\002\uffd3\001\002\000\004\002" +
    "\uffd0\001\002\000\004\034\035\001\002\000\004\002\uffd5" +
    "\001\002\000\006\002\uffd1\027\037\001\002\000\010\027" +
    "\037\032\111\034\041\001\002\000\004\002\uffd4\001\002" +
    "\000\012\024\123\027\037\032\125\034\041\001\002\000" +
    "\004\034\035\001\002\000\004\002\uffcd\001\002\000\004" +
    "\034\035\001\002\000\004\034\uffcc\001\002\000\004\002" +
    "\uffcf\001\002\000\006\002\uffc9\034\uffc9\001\002\000\010" +
    "\002\uffca\027\037\034\uffca\001\002\000\010\027\037\032" +
    "\125\034\041\001\002\000\004\002\uffce\001\002\000\010" +
    "\027\037\032\125\034\041\001\002\000\004\002\uffcb\001" +
    "\002\000\004\002\uffc8\001\002\000\012\013\141\030\140" +
    "\031\135\034\041\001\002\000\004\034\uffbe\001\002\000" +
    "\004\034\035\001\002\000\004\002\uffc1\001\002\000\004" +
    "\034\uffbf\001\002\000\004\034\035\001\002\000\010\030" +
    "\140\031\135\034\041\001\002\000\004\002\uffc2\001\002" +
    "\000\012\010\150\011\152\012\146\034\041\001\002\000" +
    "\010\011\152\012\146\034\uffb1\001\002\000\010\010\uffaa" +
    "\011\uffaa\034\uffaa\001\002\000\010\010\150\012\146\034" +
    "\uffaf\001\002\000\010\011\uffac\012\uffac\034\uffac\001\002" +
    "\000\004\034\035\001\002\000\010\010\uffab\012\uffab\034" +
    "\uffab\001\002\000\010\010\150\011\152\034\uffb0\001\002" +
    "\000\006\011\152\034\uffb7\001\002\000\006\010\150\034" +
    "\uffb6\001\002\000\004\034\uffbd\001\002\000\004\034\uffba" +
    "\001\002\000\010\027\037\032\161\034\041\001\002\000" +
    "\004\002\uffad\001\002\000\004\002\uffc0\001\002\000\006" +
    "\002\uffae\027\037\001\002\000\006\012\146\034\uffb5\001" +
    "\002\000\006\010\150\034\uffb4\001\002\000\004\034\uffb9" +
    "\001\002\000\004\034\uffbc\001\002\000\006\012\146\034" +
    "\uffb3\001\002\000\006\011\152\034\uffb2\001\002\000\004" +
    "\034\uffbb\001\002\000\004\034\uffb8\001\002\000\010\006" +
    "\200\007\201\034\041\001\002\000\006\002\uffec\034\035" +
    "\001\002\000\004\002\ufff1\001\002\000\006\002\uffed\034" +
    "\035\001\002\000\006\002\uffeb\034\uffeb\001\002\000\006" +
    "\002\uffea\034\uffea\001\002\000\006\007\201\034\041\001" +
    "\002\000\004\002\uffef\001\002\000\006\006\200\034\041" +
    "\001\002\000\004\002\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\034\002\012\004\007\011\027\012\016\013" +
    "\015\017\025\021\013\024\026\030\031\033\023\037\014" +
    "\045\010\047\024\001\001\000\002\001\001\000\004\006" +
    "\173\001\001\000\004\006\133\001\001\000\004\006\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\077\001\001\000\004\006\065\001\001\000\004\006\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\050\001\001\000\002\001\001\000\004\006" +
    "\033\001\001\000\012\007\042\010\043\022\041\023\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\045" +
    "\001\001\000\004\010\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\042\010\043\023\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\055\010" +
    "\043\046\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\044\001" +
    "\001\000\006\031\061\032\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\063\001" +
    "\001\000\006\007\064\010\043\001\001\000\004\010\044" +
    "\001\001\000\012\007\071\010\043\025\070\026\067\001" +
    "\001\000\002\001\001\000\004\006\072\001\001\000\002" +
    "\001\001\000\004\010\044\001\001\000\012\007\071\010" +
    "\043\026\075\027\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\103\010\043\020\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\044\001\001\000" +
    "\002\001\001\000\014\007\113\010\043\034\112\035\111" +
    "\036\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\114\001\001\000\002\001\001" +
    "\000\004\010\044\001\001\000\010\007\113\010\043\036" +
    "\115\001\001\000\002\001\001\000\016\007\125\010\043" +
    "\040\123\041\121\042\120\043\117\001\001\000\004\006" +
    "\130\001\001\000\002\001\001\000\004\006\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\044\001\001\000\012\007\125\010\043\042\127" +
    "\043\117\001\001\000\002\001\001\000\012\007\125\010" +
    "\043\043\132\044\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\050\136\051\135\001\001\000\002\001" +
    "\001\000\004\006\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\141\001\001\000\006\050\142\051" +
    "\135\001\001\000\002\001\001\000\012\052\150\054\144" +
    "\055\146\056\152\001\001\000\006\055\167\056\170\001" +
    "\001\000\002\001\001\000\006\054\163\056\164\001\001" +
    "\000\002\001\001\000\004\006\157\001\001\000\002\001" +
    "\001\000\006\054\153\055\154\001\001\000\004\055\156" +
    "\001\001\000\004\054\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\162\010\043\053\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\044\001" +
    "\001\000\004\056\166\001\001\000\004\054\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\172\001" +
    "\001\000\004\055\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\175\015\176\016\174\001\001\000" +
    "\004\006\203\001\001\000\002\001\001\000\004\006\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\202\001\001\000\002\001\001\000\004\015\204\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private int positionNode = 0;
	private String nodoAnterior = null;
	private ManejadorParser mp = new ManejadorParser();

	// Connect this parser to a scanner!
	public parser(Lexer lex) {
		super(lex);
	}

        public void syntax_error(Symbol cur_token) {
            System.out.println("Error sintactico en <" + cur_token.value + ">");
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= main2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main1 ::= space 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main2 ::= pwd 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main2 ::= exit 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main2 ::= ls 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main2 ::= cd 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main2 ::= touch 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // main2 ::= mv 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // main2 ::= mkdir 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // main2 ::= rm 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // main2 ::= cp 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // main2 ::= rmdir 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // main2 ::= chmod 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // main3 ::= space 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // pwd ::= PWD 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pwd",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ls ::= LS space ls1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ls ::= LS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ls1 ::= l1 space l2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ls1 ::= l2 space l1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ls1 ::= l1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ls1 ::= l2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // l1 ::= LONG 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // l2 ::= HIDDEN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cd ::= CD space cd1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cd",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cd1 ::= BACK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cd1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cd1 ::= ACTUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cd1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cd1 ::= path 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cd1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // touch ::= TOUCH space touch1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("touch",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // touch1 ::= touch1 space touch2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("touch1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // touch1 ::= touch2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("touch1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // touch2 ::= ID 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		mp.touchById("ID: " + e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("touch2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // touch2 ::= path 
            {
              String RESULT =null;
		mp.touchByPath("Nodo: " + nodoAnterior);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("touch2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // mv ::= MV space mv1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mv1 ::= mv2 space mv3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mv2 ::= path 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // mv2 ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // mv3 ::= mv2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // mv3 ::= ACTUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // mv3 ::= BACK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // mkdir ::= MKDIR space mkdir1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mkdir",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // mkdir1 ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mkdir1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // mkdir1 ::= p space path 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mkdir1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // p ::= VARIOUS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // rm ::= RM space rm1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // rm1 ::= rm2 space rm3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // rm1 ::= rm3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // rm2 ::= ALL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // rm3 ::= path 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm3",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // rm3 ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm3",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cp ::= CP space cp1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cp1 ::= cp2 space cp3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cp1 ::= cp3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cp2 ::= ALL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cp3 ::= cp4 space cp5 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp3",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cp4 ::= path 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp4",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cp4 ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp4",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cp5 ::= cp4 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp5",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rmdir ::= RMDIR space rmdir1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rmdir",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rmdir1 ::= path 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rmdir1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rmdir1 ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rmdir1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // rmdir1 ::= ACTUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rmdir1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rmdir1 ::= BACK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rmdir1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // chmod ::= CHMOD space RECURSIVE space chmod1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // chmod ::= CHMOD space chmod1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // chmod1 ::= chmod2 space chmod3 space chmod4 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // chmod2 ::= AGREGAR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // chmod2 ::= QUITAR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // chmod3 ::= r w x 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // chmod3 ::= w x r 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // chmod3 ::= x r w 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // chmod3 ::= r x w 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // chmod3 ::= w r x 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // chmod3 ::= x w r 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // chmod3 ::= r x 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // chmod3 ::= r w 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // chmod3 ::= w x 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // chmod3 ::= w r 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // chmod3 ::= x w 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // chmod3 ::= x r 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // chmod3 ::= x 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // chmod3 ::= r 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // chmod3 ::= w 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // chmod4 ::= path 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod4",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // chmod4 ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod4",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // x ::= EXECUTE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("x",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // w ::= WRITE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("w",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // r ::= READ 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // path ::= path path1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // path ::= path1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // path1 ::= SLASH ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= e2;System.out.printf("%s\n", RESULT); positionNode++;mp.isNode(RESULT, nodoAnterior, positionNode);nodoAnterior = RESULT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // space ::= space SPACE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("space",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // space ::= SPACE 
            {
              String RESULT =null;
		 positionNode = 0; nodoAnterior = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("space",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // exit ::= EXIT 
            {
              String RESULT =null;
		mp.exit();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
