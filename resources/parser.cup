package analizadorLexico;

import java_cup.runtime.*;


parser code {:
	// Connect this parser to a scanner!
	public parser(Lexer lex) {
		super(lex);
	}

        public void syntax_error(Symbol cur_token) {
            System.out.println("Error sintactico en <" + cur_token.value + ">");
        }
:}

/* Terminals (tokens returned by the scanner). */
terminal String          PWD, LS, LONG, HIDDEN, EXECUTE, WRITE, READ;
terminal String          CD, BACK, ACTUAL, TOUCH, MKDIR, MV, CP, VARIOUS, ALL;
terminal String          RM, RMDIR, SLASH, AGREGAR, QUITAR, ID, CHMOD, SPACE;

/* Non-terminals */
non terminal String         main, path, path1;
non terminal String 		ls, ls1, l1,l2;
non terminal String 		cd, cd1;
non terminal String 		touch, touch1, touch2;
non terminal String 		mv, mv1, mv2, mv3;
non terminal String 		mkdir, mkdir1;

/* The grammar */
start with main;

main ::= 	touch
 			| mv
 			| ls
 			| cd
 			| mkdir
	 			;

/*==============Gramtica LS==============*/
ls ::=		LS:e1 ls1:e2 {:RESULT = e1 + " " + e2; System.out.printf("%s\n", RESULT);:}
			| LS
			;

ls1 ::= 	l1 l2
			| l2 l1
			| l1
			| l2
			;

l1 ::= 		LONG:e {:RESULT = e;:}
			;

l2 ::= 		HIDDEN:e {:RESULT = e;:}
			;

/*==============Gramtica CD==============*/
cd ::= 		CD cd1
			;

cd1 ::=		path
			| BACK
			| ACTUAL
			| error
			;

/*=============Gramtica TOUCH=============*/
touch ::= 	TOUCH:e1 touch1:e2
			;

touch1 ::= 	path:e
			| ID:e
			;

/*==============Gramtica MV==============*/
mv ::=		MV mv1
			;

mv1 ::=		ID mv2
			;

mv2 ::=		path
			| BACK
			| ACTUAL
			;

/*==============Gramtica PATH==============*/

mkdir ::= 	MKDIR mkdir1
			;

mkdir1 ::= ID
			|VARIOUS path
			;


/*==============Gramtica PATH==============*/

path ::= path path1
		| path1
		;

path1 ::= SLASH:e1 ID:e2 {:RESULT= e1 + e2;System.out.printf("path = %s", RESULT); :}
		;
