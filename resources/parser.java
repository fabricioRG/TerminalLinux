
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorLexico;

import java_cup.runtime.*;
import analizadorLexico.backend.*;
import analizadorLexico.sym;
import Node.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\002\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\016" +
    "\003\000\002\017\005\000\002\017\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\021\005\000" +
    "\002\021\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\060" +
    "\002\000\002\023\006\000\002\024\005\000\002\024\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\026\005\000\002\027\005\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\004\000\002\030\004\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\032\005\000\002\033\003\000" +
    "\002\033\004\000\002\033\004\000\002\033\004\000\002" +
    "\033\005\000\002\033\003\000\002\033\003\000\002\034" +
    "\003\000\002\035\005\000\002\036\005\000\002\036\003" +
    "\000\002\037\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\004\000\002\040\004\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\041" +
    "\005\000\002\042\005\000\002\042\003\000\002\043\003" +
    "\000\002\044\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\004\000\002\045\004\000\002\045\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\047" +
    "\005\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\051\007\000\002\051\005\000\002\052\005\000\002" +
    "\053\003\000\002\053\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\012\004" +
    "\000\002\012\003\000\002\013\004\000\002\013\003\000" +
    "\002\007\004\000\002\010\004\000\002\011\003\000\002" +
    "\011\003\000\002\006\004\000\002\006\003\000\002\006" +
    "\004\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\032\003\031\004\023\005\005\015\020\020" +
    "\034\021\022\022\021\023\007\027\012\030\032\035\006" +
    "\037\004\001\002\000\006\002\uff7e\014\uff7e\001\002\000" +
    "\012\002\ufff0\003\036\014\ufff0\036\040\001\002\000\006" +
    "\003\036\036\040\001\002\000\006\003\036\036\040\001" +
    "\002\000\006\002\uffff\014\uffff\001\002\000\006\002\ufff4" +
    "\014\ufff4\001\002\000\006\003\036\036\040\001\002\000" +
    "\006\002\157\014\156\001\002\000\006\002\ufff5\014\ufff5" +
    "\001\002\000\006\002\ufff9\014\ufff9\001\002\000\006\002" +
    "\ufffb\014\ufffb\001\002\000\006\002\ufffd\014\ufffd\001\002" +
    "\000\012\002\uffeb\003\036\014\uffeb\036\040\001\002\000" +
    "\006\003\036\036\040\001\002\000\006\003\036\036\040" +
    "\001\002\000\006\002\ufff2\014\ufff2\001\002\000\006\002" +
    "\ufff6\014\ufff6\001\002\000\006\002\ufff3\014\ufff3\001\002" +
    "\000\006\002\ufffa\014\ufffa\001\002\000\006\002\ufff8\014" +
    "\ufff8\001\002\000\006\002\ufffc\014\ufffc\001\002\000\004" +
    "\036\110\001\002\000\006\003\036\036\040\001\002\000" +
    "\006\002\ufff7\014\ufff7\001\002\000\006\003\uffe5\036\uffe5" +
    "\001\002\000\006\003\036\036\040\001\002\000\004\036" +
    "\077\001\002\000\036\004\062\005\045\015\055\020\066" +
    "\021\060\022\056\023\046\027\052\030\065\031\051\034" +
    "\057\035\047\036\061\037\041\001\002\000\110\004\uff8b" +
    "\005\uff8b\006\uff8b\007\uff8b\013\uff8b\015\uff8b\016\uff8b\017" +
    "\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b" +
    "\026\uff8b\027\uff8b\030\uff8b\031\uff8b\034\uff8b\035\uff8b\036" +
    "\uff8b\037\uff8b\040\uff8b\041\uff8b\043\uff8b\044\uff8b\045\uff8b" +
    "\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054" +
    "\uff8b\055\uff8b\001\002\000\014\002\uff7f\003\uff7f\014\uff7f" +
    "\031\uff7f\036\uff7f\001\002\000\004\031\076\001\002\000" +
    "\014\002\uff91\003\uff91\014\uff91\031\uff91\036\uff91\001\002" +
    "\000\042\002\uff93\003\uff93\004\uff93\005\uff93\014\uff93\015" +
    "\uff93\020\uff93\021\uff93\022\uff93\023\uff93\027\uff93\030\uff93" +
    "\034\uff93\035\uff93\036\uff93\037\uff93\001\002\000\014\002" +
    "\uff88\003\uff88\014\uff88\031\uff88\036\uff88\001\002\000\014" +
    "\002\uff81\003\uff81\014\uff81\031\uff81\036\uff81\001\002\000" +
    "\014\002\uff82\003\uff82\014\uff82\031\uff82\036\uff82\001\002" +
    "\000\042\002\uffde\003\uffde\004\062\005\045\014\uffde\015" +
    "\055\020\066\021\060\022\056\023\046\027\052\030\065" +
    "\034\072\035\047\036\uffde\037\041\001\002\000\032\004" +
    "\062\005\045\015\055\020\066\021\060\022\056\023\046" +
    "\027\052\030\065\034\072\035\047\037\041\001\002\000" +
    "\014\002\uff83\003\uff83\014\uff83\031\uff83\036\uff83\001\002" +
    "\000\012\002\uffe2\003\uffe2\014\uffe2\036\uffe2\001\002\000" +
    "\012\002\uffe4\003\036\014\uffe4\036\040\001\002\000\014" +
    "\002\uff87\003\uff87\014\uff87\031\uff87\036\uff87\001\002\000" +
    "\014\002\uff85\003\uff85\014\uff85\031\uff85\036\uff85\001\002" +
    "\000\014\002\uffe1\003\uffe1\014\uffe1\031\uff8d\036\uffe1\001" +
    "\002\000\014\002\uff84\003\uff84\014\uff84\031\uff84\036\uff84" +
    "\001\002\000\110\004\uff8c\005\uff8c\006\uff8c\007\uff8c\013" +
    "\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c" +
    "\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031" +
    "\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c" +
    "\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051" +
    "\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\001\002\000\014" +
    "\002\uff89\003\uff89\014\uff89\031\uff89\036\uff89\001\002\000" +
    "\014\002\uffdf\003\uffdf\014\uffdf\031\051\036\uffdf\001\002" +
    "\000\014\002\uffe0\003\uffe0\014\uffe0\031\uff8e\036\uffe0\001" +
    "\002\000\014\002\uff80\003\uff80\014\uff80\031\uff80\036\uff80" +
    "\001\002\000\014\002\uff86\003\uff86\014\uff86\031\uff86\036" +
    "\uff86\001\002\000\014\002\uff92\003\uff92\014\uff92\031\uff92" +
    "\036\uff92\001\002\000\036\004\062\005\045\015\055\020" +
    "\066\021\060\022\056\023\046\027\052\030\065\031\051" +
    "\034\057\035\047\036\061\037\041\001\002\000\012\002" +
    "\uffe3\003\uffe3\014\uffe3\036\uffe3\001\002\000\014\002\uff8d" +
    "\003\uff8d\014\uff8d\031\uff8d\036\uff8d\001\002\000\014\002" +
    "\uff8f\003\uff8f\014\uff8f\031\uff8f\036\uff8f\001\002\000\014" +
    "\002\uff8e\003\uff8e\014\uff8e\031\uff8e\036\uff8e\001\002\000" +
    "\042\002\uff94\003\uff94\004\uff94\005\uff94\014\uff94\015\uff94" +
    "\020\uff94\021\uff94\022\uff94\023\uff94\027\uff94\030\uff94\034" +
    "\uff94\035\uff94\036\uff94\037\uff94\001\002\000\042\002\uff90" +
    "\003\uff90\004\uff90\005\uff90\014\uff90\015\uff90\020\uff90\021" +
    "\uff90\022\uff90\023\uff90\027\uff90\030\uff90\034\uff90\035\uff90" +
    "\036\uff90\037\uff90\001\002\000\110\004\uff8a\005\uff8a\006" +
    "\uff8a\007\uff8a\013\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a" +
    "\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027" +
    "\uff8a\030\uff8a\031\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a" +
    "\040\uff8a\041\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047" +
    "\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a" +
    "\001\002\000\042\004\062\005\045\015\055\016\106\017" +
    "\105\020\066\021\060\022\056\023\046\027\052\030\065" +
    "\031\051\034\102\035\047\036\061\037\041\001\002\000" +
    "\036\002\uffaf\004\062\005\045\014\uffaf\015\055\020\066" +
    "\021\060\022\056\023\046\027\052\030\065\034\072\035" +
    "\047\037\041\001\002\000\010\002\uffae\014\uffae\031\uff8d" +
    "\001\002\000\010\002\uffb0\014\uffb0\031\051\001\002\000" +
    "\010\002\uffad\014\uffad\031\uff8e\001\002\000\006\002\uffac" +
    "\014\uffac\001\002\000\006\002\uffab\014\uffab\001\002\000" +
    "\006\002\uffb1\014\uffb1\001\002\000\006\002\ufffe\014\ufffe" +
    "\001\002\000\044\004\062\005\045\015\055\016\122\017" +
    "\120\020\066\021\060\022\056\023\046\024\112\027\052" +
    "\030\065\031\051\034\115\035\047\036\061\037\041\001" +
    "\002\000\006\003\uffcb\036\uffcb\001\002\000\032\004\062" +
    "\005\045\015\055\020\066\021\060\022\056\023\046\027" +
    "\052\030\065\034\127\035\047\037\041\001\002\000\006" +
    "\002\uffd3\014\uffd3\001\002\000\010\002\uffcd\014\uffcd\031" +
    "\uff8d\001\002\000\010\002\uffd2\014\uffd2\031\051\001\002" +
    "\000\006\003\036\036\040\001\002\000\004\031\051\001" +
    "\002\000\010\002\uffcc\014\uffcc\031\uff8e\001\002\000\004" +
    "\031\051\001\002\000\010\002\uffcf\014\uffcf\031\051\001" +
    "\002\000\010\002\uffd0\014\uffd0\031\051\001\002\000\006" +
    "\031\051\036\061\001\002\000\010\002\uffce\014\uffce\031" +
    "\051\001\002\000\010\002\uffd1\014\uffd1\031\uff8d\001\002" +
    "\000\042\004\062\005\045\015\055\016\137\017\136\020" +
    "\066\021\060\022\056\023\046\027\052\030\065\031\051" +
    "\034\133\035\047\036\061\037\041\001\002\000\042\002" +
    "\uffda\003\uffda\004\062\005\045\014\uffda\015\055\020\066" +
    "\021\060\022\056\023\046\027\052\030\065\034\072\035" +
    "\047\036\uffda\037\041\001\002\000\006\003\036\036\040" +
    "\001\002\000\014\002\uffd9\003\uffd9\014\uffd9\031\uff8d\036" +
    "\uffd9\001\002\000\006\002\uffdd\014\uffdd\001\002\000\014" +
    "\002\uffdb\003\uffdb\014\uffdb\031\051\036\uffdb\001\002\000" +
    "\004\031\051\001\002\000\004\031\051\001\002\000\014" +
    "\002\uffd7\003\uffd7\014\uffd7\031\051\036\uffd7\001\002\000" +
    "\014\002\uffd8\003\uffd8\014\uffd8\031\051\036\uffd8\001\002" +
    "\000\042\004\062\005\045\015\055\016\146\017\145\020" +
    "\066\021\060\022\056\023\046\027\052\030\065\031\051" +
    "\034\133\035\047\036\061\037\041\001\002\000\006\002" +
    "\uffdc\014\uffdc\001\002\000\006\002\uffd6\014\uffd6\001\002" +
    "\000\010\002\uffd5\014\uffd5\031\051\001\002\000\010\002" +
    "\uffd4\014\uffd4\031\051\001\002\000\042\004\062\005\045" +
    "\015\055\016\155\017\153\020\066\021\060\022\056\023" +
    "\046\027\052\030\065\031\151\034\072\035\047\036\061" +
    "\037\041\001\002\000\036\002\uffe6\004\062\005\045\014" +
    "\uffe6\015\055\020\066\021\060\022\056\023\046\027\052" +
    "\030\065\034\072\035\047\037\041\001\002\000\036\002" +
    "\uffe8\004\062\005\045\014\uffe8\015\055\020\066\021\060" +
    "\022\056\023\046\027\052\030\065\034\072\035\047\037" +
    "\041\001\002\000\010\002\uffe7\014\uffe7\031\051\001\002" +
    "\000\006\002\uffe9\014\uffe9\001\002\000\006\002\uffec\014" +
    "\uffec\001\002\000\006\002\uffea\014\uffea\001\002\000\002" +
    "\001\002\000\004\002\001\001\002\000\006\002\000\014" +
    "\000\001\002\000\044\004\062\005\045\015\055\016\173" +
    "\017\171\020\066\021\060\022\056\023\046\025\166\027" +
    "\052\030\065\031\051\034\167\035\047\036\061\037\041" +
    "\001\002\000\006\002\uffc8\014\uffc8\001\002\000\006\003" +
    "\036\036\040\001\002\000\006\002\uffca\014\uffca\001\002" +
    "\000\036\002\uffbf\004\062\005\045\014\uffbf\015\055\020" +
    "\066\021\060\022\056\023\046\027\052\030\065\034\072" +
    "\035\047\037\041\001\002\000\006\003\uffc7\036\uffc7\001" +
    "\002\000\010\002\uffc6\014\uffc6\031\uff8d\001\002\000\010" +
    "\002\uffc0\014\uffc0\031\051\001\002\000\010\002\uffc1\014" +
    "\uffc1\031\051\001\002\000\010\002\uffc5\014\uffc5\031\uff8e" +
    "\001\002\000\010\002\uffc2\014\uffc2\031\051\001\002\000" +
    "\010\002\uffc3\014\uffc3\031\051\001\002\000\010\002\uffc4" +
    "\014\uffc4\031\051\001\002\000\042\004\062\005\045\015" +
    "\055\016\173\017\171\020\066\021\060\022\056\023\046" +
    "\027\052\030\065\031\051\034\167\035\047\036\061\037" +
    "\041\001\002\000\006\002\uffc9\014\uffc9\001\002\000\044" +
    "\004\062\005\045\015\055\016\212\017\205\020\066\021" +
    "\060\022\056\023\046\025\202\027\052\030\065\031\051" +
    "\034\203\035\047\036\061\037\041\001\002\000\036\002" +
    "\uffb8\004\062\005\045\014\uffb8\015\055\020\066\021\060" +
    "\022\056\023\046\027\052\030\065\034\072\035\047\037" +
    "\041\001\002\000\006\003\uffbb\036\uffbb\001\002\000\010" +
    "\002\uffb5\014\uffb5\031\uff8d\001\002\000\010\002\uffb9\014" +
    "\uffb9\031\051\001\002\000\004\031\051\001\002\000\006" +
    "\002\uffba\014\uffba\001\002\000\006\002\uffbc\014\uffbc\001" +
    "\002\000\006\003\036\036\040\001\002\000\006\002\uffbe" +
    "\014\uffbe\001\002\000\004\031\051\001\002\000\010\002" +
    "\uffb6\014\uffb6\031\051\001\002\000\042\004\062\005\045" +
    "\015\055\016\212\017\205\020\066\021\060\022\056\023" +
    "\046\027\052\030\065\031\051\034\203\035\047\036\061" +
    "\037\041\001\002\000\006\002\uffbd\014\uffbd\001\002\000" +
    "\010\002\uffb7\014\uffb7\031\051\001\002\000\042\013\231" +
    "\025\221\036\061\040\220\041\242\043\227\044\240\045" +
    "\236\046\237\047\234\050\224\051\225\052\241\053\222" +
    "\054\232\055\230\001\002\000\006\003\uff99\036\uff99\001" +
    "\002\000\006\003\uff9b\036\uff9b\001\002\000\006\003\uff9e" +
    "\036\uff9e\001\002\000\006\003\uffa7\036\uffa7\001\002\000" +
    "\006\003\uffa1\036\uffa1\001\002\000\006\003\uffa2\036\uffa2" +
    "\001\002\000\006\003\uffa6\036\uffa6\001\002\000\006\003" +
    "\uff95\036\uff95\001\002\000\006\003\uff9f\036\uff9f\001\002" +
    "\000\006\003\036\036\040\001\002\000\006\003\uff9d\036" +
    "\uff9d\001\002\000\006\003\036\036\040\001\002\000\006" +
    "\003\uffa0\036\uffa0\001\002\000\006\002\uffa9\014\uffa9\001" +
    "\002\000\006\003\uff96\036\uff96\001\002\000\006\003\uff98" +
    "\036\uff98\001\002\000\006\003\uff97\036\uff97\001\002\000" +
    "\006\003\uff9c\036\uff9c\001\002\000\006\003\uff9a\036\uff9a" +
    "\001\002\000\036\004\062\005\045\015\055\020\066\021" +
    "\060\022\056\023\046\027\052\030\065\031\051\034\244" +
    "\035\047\036\061\037\041\001\002\000\006\002\uffa3\014" +
    "\uffa3\001\002\000\010\002\uffa5\014\uffa5\031\051\001\002" +
    "\000\006\002\uffa4\014\uffa4\001\002\000\006\002\uffa8\014" +
    "\uffa8\001\002\000\040\025\221\036\061\040\220\041\242" +
    "\043\227\044\240\045\236\046\237\047\234\050\224\051" +
    "\225\052\241\053\222\054\232\055\230\001\002\000\006" +
    "\002\uffaa\014\uffaa\001\002\000\012\006\254\007\255\026" +
    "\256\036\061\001\002\000\006\002\ufff1\014\ufff1\001\002" +
    "\000\006\002\uffef\014\uffef\001\002\000\006\002\uffee\014" +
    "\uffee\001\002\000\006\002\uffed\014\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\034\002\012\003\007\014\027\016\016\017" +
    "\015\021\025\023\014\026\026\032\032\035\023\041\013" +
    "\047\010\051\024\001\001\000\002\001\001\000\004\006" +
    "\251\001\001\000\004\006\216\001\001\000\004\006\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\146\001\001\000\004\006\127\001\001\000\004\006\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\077\001\001\000\002\001" +
    "\001\000\004\060\034\001\001\000\004\006\036\001\001" +
    "\000\002\001\001\000\022\007\043\010\042\011\041\012" +
    "\047\013\062\015\063\024\053\025\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\074\011\041\015\073\001" +
    "\001\000\006\011\072\015\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\043\010\042\011\041\012" +
    "\047\013\062\015\063\025\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\007\043\010\042\011\041\012\100\013\102\015\103\050" +
    "\106\001\001\000\010\007\074\011\041\015\073\001\001" +
    "\000\002\001\001\000\004\010\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\007\043\010\042\011\041\012" +
    "\112\013\115\015\120\033\113\034\116\001\001\000\002" +
    "\001\001\000\010\007\074\011\041\015\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\066\001\001" +
    "\000\004\006\124\001\001\000\006\010\042\013\123\001" +
    "\001\000\002\001\001\000\006\010\042\013\122\001\001" +
    "\000\004\010\066\001\001\000\004\010\066\001\001\000" +
    "\006\010\042\013\125\001\001\000\004\010\066\001\001" +
    "\000\002\001\001\000\022\007\043\010\042\011\041\012" +
    "\130\013\134\015\073\027\133\030\131\001\001\000\010" +
    "\007\074\011\041\015\073\001\001\000\004\006\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\066" +
    "\001\001\000\006\010\042\013\140\001\001\000\006\010" +
    "\042\013\137\001\001\000\004\010\066\001\001\000\004" +
    "\010\066\001\001\000\022\007\043\010\042\011\041\012" +
    "\130\013\134\015\073\030\143\031\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\042\013\140\001" +
    "\001\000\006\010\042\013\137\001\001\000\020\007\043" +
    "\010\042\011\041\012\147\013\151\015\073\022\153\001" +
    "\001\000\010\007\074\011\041\015\073\001\001\000\006" +
    "\011\072\015\073\001\001\000\004\010\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\007\043\010\042\011\041\012\164\013\167\015\171" +
    "\036\163\037\162\040\161\001\001\000\002\001\001\000" +
    "\004\006\175\001\001\000\002\001\001\000\010\007\074" +
    "\011\041\015\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\066\001\001\000\006\010\042\013\174" +
    "\001\001\000\002\001\001\000\006\010\042\013\173\001" +
    "\001\000\004\010\066\001\001\000\004\010\066\001\001" +
    "\000\020\007\043\010\042\011\041\012\164\013\167\015" +
    "\171\040\176\001\001\000\002\001\001\000\026\007\043" +
    "\010\042\011\041\012\200\013\203\015\073\042\210\043" +
    "\207\044\206\045\205\001\001\000\010\007\074\011\041" +
    "\015\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\066\001\001\000\006\010\042\013\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\213\001" +
    "\001\000\002\001\001\000\006\010\042\013\212\001\001" +
    "\000\004\010\066\001\001\000\022\007\043\010\042\011" +
    "\041\012\200\013\203\015\073\044\214\045\205\001\001" +
    "\000\002\001\001\000\004\010\066\001\001\000\012\052" +
    "\234\053\232\056\222\057\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\247\001\001\000" +
    "\002\001\001\000\004\006\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\042\013\244\015\245\054\246\001\001\000\002\001" +
    "\001\000\004\010\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\052\250\053\232\056\222\057\225\001" +
    "\001\000\002\001\001\000\004\020\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public static String CD_ROOT = "/"; //root por defecto
	public static int OPTION_DIRECTORIO = 0;
	public static int OPTION_ARCHIVO = 1;
	private int positionNode = 1; //Posicion de los nodos en el arbol
	private int option = 0; //Directorio = 0, Path = 1
	private String nodoAnterior = "";
	private String nodoAnterior1 = "";
	private ManejadorParser mp = null;
	private Nodo nodo = null;
	private Nodo nodo1 = null;
	private int chmodOption = 0;
	private boolean recursive = false;
	private int chmodFuntion = 0;

	// Connect this parser to a scanner!
	public parser(Lexer lex, ManejadorParser mp) {
		super(lex);
		this.mp = mp;
		this.nodo = mp.getNodeRoot();
		this.nodo1 = mp.getNodoActual();
		this.nodoAnterior1 = nodo1.getNombre();
	}

        public void syntax_error(Symbol cur_token) {
            System.out.println("Error sintactico en <" + cur_token.value + ">");
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= main CONCAT main2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= main1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main ::= error SPACE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main1 ::= pwd 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main1 ::= exit 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main1 ::= ls 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main1 ::= cd 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // main1 ::= touch 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // main1 ::= mv 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // main1 ::= mkdir 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // main1 ::= rm 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // main1 ::= cp 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // main1 ::= rmdir 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // main1 ::= chmod 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // pwd ::= PWD 
            {
              String RESULT =null;
		mp.pwd();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pwd",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ls ::= LS space ls1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ls ::= LS 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		mp.ls(0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ls1 ::= LONG 
            {
              String RESULT =null;
		mp.ls(1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ls1 ::= HIDDEN 
            {
              String RESULT =null;
		mp.ls(2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ls1 ::= LONG_HIDDEN 
            {
              String RESULT =null;
		mp.ls(3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cd ::= CD space cd1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cd",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cd ::= CD 
            {
              String RESULT =null;
		mp.functionByPath(CD_ROOT, nodo, nodoAnterior, 2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cd",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cd1 ::= BACK 
            {
              String RESULT =null;
		mp.cdByBack();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cd1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cd1 ::= ACTUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cd1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cd1 ::= SLASH 
            {
              String RESULT =null;
		mp.functionByPath(CD_ROOT, nodo, nodoAnterior, 2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cd1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cd1 ::= pathAbs 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1; mp.functionByPath(RESULT, nodo, nodoAnterior, 2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cd1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cd1 ::= pathRel 
            {
              String RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cd1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$0 ::= 
            {
              String RESULT =null;
 positionNode = 0; nodoAnterior = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // touch ::= TOUCH NT$0 space touch1 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("touch",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // touch1 ::= touch1 space touch2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("touch1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // touch1 ::= touch2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("touch1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // touch2 ::= ID 
            {
              String RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e2; mp.functionById(RESULT, 1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("touch2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // touch2 ::= palabraRes 
            {
              String RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("touch2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // touch2 ::= pathAbs 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1; mp.functionByPath(RESULT, nodo, nodoAnterior, 1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("touch2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // touch2 ::= pathRel 
            {
              String RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("touch2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // mv ::= MV space mv1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // mv1 ::= mv2 space mv3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // mv2 ::= pathAbs 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // mv2 ::= pathRel 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // mv2 ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // mv2 ::= ACTUAL pathAbs 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // mv2 ::= BACK pathAbs 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // mv3 ::= mv2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv3",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // mv3 ::= ACTUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv3",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // mv3 ::= BACK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv3",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // mkdir ::= MKDIR space mkdir1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mkdir",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // mkdir1 ::= pathAbs 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1; mp.functionByPath(RESULT, nodo, nodoAnterior, 0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mkdir1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // mkdir1 ::= pathRel ID 
            {
              String RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e3 + e4;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mkdir1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // mkdir1 ::= ACTUAL pathAbs 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mkdir1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // mkdir1 ::= BACK pathAbs 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mkdir1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // mkdir1 ::= p space pathAbs 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mkdir1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // mkdir1 ::= ID 
            {
              String RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e2; mp.functionById(RESULT, 0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mkdir1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mkdir1 ::= palabraRes 
            {
              String RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e3; mp.functionById(RESULT, 0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mkdir1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // p ::= VARIOUS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // rm ::= RM space rm1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rm1 ::= rm2 space rm3 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1; if(option == 1){mp.rmById(RESULT, 2);} else {mp.rmdirByPath(nodo, nodoAnterior, 1);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rm1 ::= rm3 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1; if(option == 1){mp.rmById(RESULT, 1);} else {mp.rmByPath(nodo, nodoAnterior);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rm2 ::= ALL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rm3 ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1; option = 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm3",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rm3 ::= palabraRes 
            {
              String RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e4; option =1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm3",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // rm3 ::= ACTUAL pathAbs 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm3",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rm3 ::= BACK pathAbs 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm3",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rm3 ::= BACK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm3",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // rm3 ::= ACTUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm3",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // rm3 ::= pathAbs 
            {
              String RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e2; option = 2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm3",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // rm3 ::= pathRel 
            {
              String RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e3; option = 2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm3",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cp ::= CP space cp1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cp1 ::= cp2 space cp3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cp1 ::= cp3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cp2 ::= ALL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp2",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cp3 ::= cp4 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp3",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cp4 ::= pathAbs 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp4",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cp4 ::= pathRel 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp4",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cp4 ::= ACTUAL pathAbs 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp4",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cp4 ::= BACK pathAbs 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp4",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cp4 ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp4",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cp5 ::= cp4 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp5",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cp5 ::= ACTUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp5",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cp5 ::= BACK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp5",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // rmdir ::= RMDIR space rmdir1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rmdir",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // rmdir1 ::= pathAbs 
            {
              String RESULT =null;
		mp.rmdirByPath(nodo, nodoAnterior, 0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rmdir1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // rmdir1 ::= pathRel 
            {
              String RESULT =null;
		mp.rmdirByPath(nodo1, nodoAnterior1, 0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rmdir1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // rmdir1 ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1; mp.rmById(RESULT, 0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rmdir1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // rmdir1 ::= palabraRes 
            {
              String RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e2; mp.rmById(RESULT, 0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rmdir1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // rmdir1 ::= ACTUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rmdir1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // rmdir1 ::= BACK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rmdir1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // chmod ::= CHMOD space RECURSIVE space chmod1 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1; mp.chmodByPathAndId(nodo, chmodOption, chmodFuntion, true, RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // chmod ::= CHMOD space chmod1 
            {
              String RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e2; mp.chmodByPathAndId(nodo, chmodOption, chmodFuntion, false, RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // chmod1 ::= chmod2 space chmod3 
            {
              String RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod1",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // chmod2 ::= agregar 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod2",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // chmod2 ::= quitar 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod2",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // chmod3 ::= pathAbs 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1; chmodFuntion = 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // chmod3 ::= palabraRes 
            {
              String RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // chmod3 ::= ID 
            {
              String RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e3; chmodFuntion = 2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // agregar ::= AGREGAR_READ 
            {
              String RESULT =null;
		chmodOption = 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agregar",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // agregar ::= AGREGAR_WRITE 
            {
              String RESULT =null;
		chmodOption = 2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agregar",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // agregar ::= AGREGAR_EXECUTE 
            {
              String RESULT =null;
		chmodOption = 3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agregar",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // agregar ::= AGREGAR_READ_WRITE 
            {
              String RESULT =null;
		chmodOption = 4;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agregar",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // agregar ::= AGREGAR_EXECUTE_READ 
            {
              String RESULT =null;
		chmodOption = 5;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agregar",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // agregar ::= AGREGAR_EXECUTE_WRITE 
            {
              String RESULT =null;
		chmodOption = 6;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agregar",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // agregar ::= AGREGAR_READ_WRITE_EXECUTE 
            {
              String RESULT =null;
		chmodOption = 7;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agregar",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // quitar ::= ALL 
            {
              String RESULT =null;
		chmodOption = 8;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quitar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // quitar ::= QUITAR_WRITE 
            {
              String RESULT =null;
		chmodOption = 9;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quitar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // quitar ::= QUITAR_EXECUTE 
            {
              String RESULT =null;
		chmodOption = 10;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quitar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // quitar ::= QUITAR_READ_WRITE 
            {
              String RESULT =null;
		chmodOption = 11;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quitar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // quitar ::= QUITAR_EXECUTE_READ 
            {
              String RESULT =null;
		chmodOption = 12;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quitar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // quitar ::= QUITAR_EXECUTE_WRITE 
            {
              String RESULT =null;
		chmodOption = 13;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quitar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // quitar ::= QUITAR_READ_WRITE_EXECUTE 
            {
              String RESULT =null;
		chmodOption = 14;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quitar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // pathRel ::= pathRel path1 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1 + e2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pathRel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // pathRel ::= path1 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pathRel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // pathAbs ::= pathAbs path2 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1 + e2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pathAbs",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // pathAbs ::= path2 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pathAbs",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // path1 ::= path3 SLASH 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= e1 + e2; positionNode = nodo1.getPosicion() + 1;
			nodo1 = mp.getNode(e1, nodoAnterior1, nodo1, positionNode, option); nodoAnterior1 = e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // path2 ::= SLASH path3 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= e1 + e2;
			nodo = mp.getNode(e2, nodoAnterior, nodo, positionNode, option); positionNode++; nodoAnterior = e2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // path3 ::= palabraRes 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // path3 ::= ID 
            {
              String RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // space ::= space SPACE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("space",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // space ::= SPACE 
            {
              String RESULT =null;
		 positionNode = 1; nodoAnterior = ""; option = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("space",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // space ::= error SPACE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("space",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // palabraRes ::= PWD 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("palabraRes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // palabraRes ::= LS 
            {
              String RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("palabraRes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // palabraRes ::= CD 
            {
              String RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e3;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("palabraRes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // palabraRes ::= TOUCH 
            {
              String RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e4;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("palabraRes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // palabraRes ::= MV 
            {
              String RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e5;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("palabraRes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // palabraRes ::= MKDIR 
            {
              String RESULT =null;
		int e6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e6;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("palabraRes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // palabraRes ::= RM 
            {
              String RESULT =null;
		int e7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e7;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("palabraRes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // palabraRes ::= CHMOD 
            {
              String RESULT =null;
		int e8left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e8;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("palabraRes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // palabraRes ::= CP 
            {
              String RESULT =null;
		int e9left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e9 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e9;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("palabraRes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // palabraRes ::= RMDIR 
            {
              String RESULT =null;
		int e10left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e10 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e10;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("palabraRes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // palabraRes ::= EXIT 
            {
              String RESULT =null;
		int e11left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e11right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e11 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e11;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("palabraRes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // exit ::= EXIT 
            {
              String RESULT =null;
		mp.exit();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
