
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorLexico;

import java_cup.runtime.*;
import analizadorLexico.backend.*;
import analizadorLexico.sym;
import Node.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\005\003\000\002\012" +
    "\003\000\002\013\005\000\002\013\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\015\005\000" +
    "\002\015\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\055\002\000\002\017" +
    "\006\000\002\020\005\000\002\020\003\000\002\021\003" +
    "\000\002\021\003\000\002\022\005\000\002\023\005\000" +
    "\002\024\003\000\002\024\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\026\005\000\002\027" +
    "\003\000\002\027\003\000\002\027\005\000\002\030\003" +
    "\000\002\031\005\000\002\032\005\000\002\032\003\000" +
    "\002\033\003\000\002\034\003\000\002\034\003\000\002" +
    "\035\005\000\002\036\005\000\002\036\003\000\002\037" +
    "\003\000\002\040\003\000\002\041\003\000\002\041\003" +
    "\000\002\042\003\000\002\043\005\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\045\007\000\002\045\005\000\002\046\007\000\002\047" +
    "\003\000\002\047\003\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\051\003\000\002\051\003\000\002\052\003\000" +
    "\002\053\003\000\002\054\003\000\002\007\004\000\002" +
    "\007\003\000\002\010\004\000\002\006\004\000\002\006" +
    "\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\030\004\023\005\006\014\020\017\033\020" +
    "\022\021\021\022\005\026\012\027\031\034\007\036\004" +
    "\001\002\000\004\002\uffa3\001\002\000\004\035\036\001" +
    "\002\000\006\002\ufff0\035\036\001\002\000\004\035\036" +
    "\001\002\000\004\002\000\001\002\000\004\002\ufff5\001" +
    "\002\000\004\035\036\001\002\000\004\002\110\001\002" +
    "\000\004\002\ufffa\001\002\000\004\002\ufff6\001\002\000" +
    "\004\002\ufffc\001\002\000\004\002\ufffe\001\002\000\006" +
    "\002\uffeb\035\036\001\002\000\004\035\036\001\002\000" +
    "\004\035\036\001\002\000\004\002\ufff2\001\002\000\004" +
    "\002\ufff7\001\002\000\004\002\ufff4\001\002\000\004\002" +
    "\ufffb\001\002\000\004\002\ufff9\001\002\000\004\002\ufffd" +
    "\001\002\000\004\035\036\001\002\000\004\002\ufff8\001" +
    "\002\000\004\035\uffe6\001\002\000\004\035\036\001\002" +
    "\000\010\030\040\033\037\035\042\001\002\000\042\006" +
    "\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\015\uffa4" +
    "\016\uffa4\023\uffa4\024\uffa4\025\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\035\uffa4\001\002\000\006\002\uffe2\035\uffe2" +
    "\001\002\000\004\033\051\001\002\000\006\002\uffe3\035" +
    "\uffe3\001\002\000\042\006\uffa5\007\uffa5\010\uffa5\011\uffa5" +
    "\012\uffa5\013\uffa5\015\uffa5\016\uffa5\023\uffa5\024\uffa5\025" +
    "\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\035\uffa5\001\002" +
    "\000\006\002\uffe5\035\036\001\002\000\010\002\uffe1\030" +
    "\040\035\uffe1\001\002\000\010\002\uffa7\030\uffa7\035\uffa7" +
    "\001\002\000\010\002\uffa8\030\uffa8\035\uffa8\001\002\000" +
    "\010\030\040\033\037\035\042\001\002\000\006\002\uffe4" +
    "\035\uffe4\001\002\000\010\002\uffa6\030\uffa6\035\uffa6\001" +
    "\002\000\014\015\056\016\055\030\040\033\053\035\042" +
    "\001\002\000\004\002\uffc4\001\002\000\004\002\uffc6\001" +
    "\002\000\004\002\uffc3\001\002\000\004\002\uffc2\001\002" +
    "\000\006\002\uffc5\030\040\001\002\000\012\023\062\030" +
    "\040\033\061\035\042\001\002\000\004\002\uffd8\001\002" +
    "\000\004\035\uffd5\001\002\000\004\002\uffd9\001\002\000" +
    "\004\035\036\001\002\000\006\002\uffd7\030\040\001\002" +
    "\000\006\030\040\035\042\001\002\000\006\002\uffd6\030" +
    "\040\001\002\000\010\030\040\033\071\035\042\001\002" +
    "\000\006\002\uffdd\035\uffdd\001\002\000\004\035\036\001" +
    "\002\000\004\002\uffe0\001\002\000\010\002\uffde\030\040" +
    "\035\uffde\001\002\000\014\015\076\016\101\030\040\033" +
    "\071\035\042\001\002\000\004\002\uffda\001\002\000\004" +
    "\002\uffdf\001\002\000\004\002\uffdc\001\002\000\004\002" +
    "\uffdb\001\002\000\012\015\104\016\105\030\103\035\042" +
    "\001\002\000\006\002\uffe8\033\051\001\002\000\004\002" +
    "\uffea\001\002\000\004\002\uffe9\001\002\000\004\002\uffec" +
    "\001\002\000\006\002\uffe7\030\040\001\002\000\004\002" +
    "\001\001\002\000\012\024\112\030\040\033\114\035\042" +
    "\001\002\000\004\035\uffd1\001\002\000\004\002\uffd2\001" +
    "\002\000\004\002\uffcf\001\002\000\004\035\036\001\002" +
    "\000\004\002\uffd4\001\002\000\006\002\uffd0\030\040\001" +
    "\002\000\010\030\040\033\114\035\042\001\002\000\004" +
    "\002\uffd3\001\002\000\012\013\127\031\126\032\123\035" +
    "\042\001\002\000\004\035\uffbd\001\002\000\004\035\036" +
    "\001\002\000\004\002\uffc0\001\002\000\004\035\uffbe\001" +
    "\002\000\004\035\036\001\002\000\010\031\126\032\123" +
    "\035\042\001\002\000\004\002\uffc1\001\002\000\012\010" +
    "\136\011\140\012\134\035\042\001\002\000\010\011\140" +
    "\012\134\035\uffb0\001\002\000\010\010\uffa9\011\uffa9\035" +
    "\uffa9\001\002\000\010\010\136\012\134\035\uffae\001\002" +
    "\000\010\011\uffab\012\uffab\035\uffab\001\002\000\004\035" +
    "\036\001\002\000\010\010\uffaa\012\uffaa\035\uffaa\001\002" +
    "\000\010\010\136\011\140\035\uffaf\001\002\000\006\011" +
    "\140\035\uffb6\001\002\000\006\010\136\035\uffb5\001\002" +
    "\000\004\035\uffbc\001\002\000\004\035\uffb9\001\002\000" +
    "\010\030\040\033\147\035\042\001\002\000\004\002\uffac" +
    "\001\002\000\004\002\uffbf\001\002\000\006\002\uffad\030" +
    "\040\001\002\000\006\012\134\035\uffb4\001\002\000\006" +
    "\010\136\035\uffb3\001\002\000\004\035\uffb8\001\002\000" +
    "\004\035\uffbb\001\002\000\006\012\134\035\uffb2\001\002" +
    "\000\006\011\140\035\uffb1\001\002\000\004\035\uffba\001" +
    "\002\000\004\035\uffb7\001\002\000\012\006\164\007\165" +
    "\025\166\035\042\001\002\000\004\002\ufff1\001\002\000" +
    "\004\002\uffef\001\002\000\004\002\uffee\001\002\000\004" +
    "\002\uffed\001\002\000\012\024\173\030\040\033\175\035" +
    "\042\001\002\000\004\002\uffca\001\002\000\004\002\uffcc" +
    "\001\002\000\004\035\036\001\002\000\004\035\uffcb\001" +
    "\002\000\004\002\uffce\001\002\000\004\002\uffc8\001\002" +
    "\000\006\002\uffc9\030\040\001\002\000\010\030\040\033" +
    "\175\035\042\001\002\000\004\002\uffcd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\034\002\012\004\007\011\027\012\016\013" +
    "\015\015\025\017\013\022\026\026\031\031\023\035\014" +
    "\043\010\045\024\001\001\000\002\001\001\000\004\006" +
    "\166\001\001\000\004\006\161\001\001\000\004\006\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\101\001\001\000\004\006\067\001\001\000\004\006\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\051\001\001\000\002\001\001\000\004\055" +
    "\033\001\001\000\004\006\034\001\001\000\012\007\043" +
    "\010\044\020\042\021\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\046\001\001\000\004\010\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\043" +
    "\010\044\021\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\056\010\044\044\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\045\001\001\000\012\007\064\010\044" +
    "\027\062\030\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\065\001\001\000\004" +
    "\010\045\001\001\000\006\007\066\010\044\001\001\000" +
    "\004\010\045\001\001\000\012\007\073\010\044\023\072" +
    "\024\071\001\001\000\002\001\001\000\004\006\074\001" +
    "\001\000\002\001\001\000\004\010\045\001\001\000\012" +
    "\007\073\010\044\024\077\025\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\106\010\044\016\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\045\001\001\000\002\001\001\000\014\007" +
    "\116\010\044\032\115\033\114\034\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\117\001\001\000\002\001\001\000\004\010\045\001\001" +
    "\000\010\007\116\010\044\034\120\001\001\000\002\001" +
    "\001\000\006\046\124\047\123\001\001\000\002\001\001" +
    "\000\004\006\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\127\001\001\000\006\046\130\047\123" +
    "\001\001\000\002\001\001\000\012\050\136\052\132\053" +
    "\134\054\140\001\001\000\006\053\155\054\156\001\001" +
    "\000\002\001\001\000\006\052\151\054\152\001\001\000" +
    "\002\001\001\000\004\006\145\001\001\000\002\001\001" +
    "\000\006\052\141\053\142\001\001\000\004\053\144\001" +
    "\001\000\004\052\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\150\010\044\051\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\045\001\001" +
    "\000\004\054\154\001\001\000\004\052\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\160\001\001" +
    "\000\004\053\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\007" +
    "\175\010\044\036\173\037\171\040\170\041\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\045\001\001\000\012\007\175\010\044\040" +
    "\177\041\167\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public static String CD_ROOT = "/"; //root por defecto
	public static int OPTION_DIRECTORIO = 0;
	public static int OPTION_ARCHIVO = 1;
	private int positionNode = 1; //Posicion de los nodos en el arbol
	private int option = 0; //Directorio = 0, Path = 1
	private String nodoAnterior = "";
	private ManejadorParser mp = null;
	private Nodo nodo = null;



	// Connect this parser to a scanner!
	public parser(Lexer lex, ManejadorParser mp) {
		super(lex);
		this.mp = mp;
		this.nodo = mp.getNodeRoot();
	}

        public void syntax_error(Symbol cur_token) {
            System.out.println("Error sintactico en <" + cur_token.value + ">");
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= main2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main1 ::= space 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main2 ::= pwd 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main2 ::= exit 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main2 ::= ls 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main2 ::= cd 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main2 ::= touch 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // main2 ::= mv 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // main2 ::= mkdir 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // main2 ::= rm 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // main2 ::= cp 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // main2 ::= rmdir 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // main2 ::= chmod 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // main3 ::= space 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // pwd ::= PWD 
            {
              String RESULT =null;
		mp.pwd();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pwd",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ls ::= LS space ls1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ls ::= LS 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		mp.ls(0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ls1 ::= LONG 
            {
              String RESULT =null;
		mp.ls(1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ls1 ::= HIDDEN 
            {
              String RESULT =null;
		mp.ls(2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ls1 ::= LONG_HIDDEN 
            {
              String RESULT =null;
		mp.ls(3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cd ::= CD space cd1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cd",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cd ::= CD 
            {
              String RESULT =null;
		mp.functionByPath(CD_ROOT, nodo, nodoAnterior, 2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cd",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cd1 ::= BACK 
            {
              String RESULT =null;
		mp.cdByBack();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cd1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cd1 ::= ACTUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cd1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cd1 ::= SLASH 
            {
              String RESULT =null;
		mp.functionByPath(CD_ROOT, nodo, nodoAnterior, 2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cd1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cd1 ::= path 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1; mp.functionByPath(RESULT, nodo, nodoAnterior, 2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cd1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$0 ::= 
            {
              String RESULT =null;
 positionNode = 0; nodoAnterior = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // touch ::= TOUCH NT$0 space touch1 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("touch",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // touch1 ::= touch1 space touch2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("touch1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // touch1 ::= touch2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("touch1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // touch2 ::= ID 
            {
              String RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e2; mp.functionById(RESULT, 1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("touch2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // touch2 ::= path 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1; mp.functionByPath(RESULT, nodo, nodoAnterior, 1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("touch2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // mv ::= MV space mv1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mv1 ::= mv2 space mv3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mv2 ::= path 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // mv2 ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // mv3 ::= mv2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // mv3 ::= ACTUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // mv3 ::= BACK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // mkdir ::= MKDIR space mkdir1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mkdir",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // mkdir1 ::= ID 
            {
              String RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e2; mp.functionById(RESULT, 0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mkdir1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // mkdir1 ::= path 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1; mp.functionByPath(RESULT, nodo, nodoAnterior, 0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mkdir1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // mkdir1 ::= p space path 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mkdir1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // p ::= VARIOUS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // rm ::= RM space rm1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // rm1 ::= rm2 space rm3 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1; if(option == 1){mp.rmById(RESULT, 2);} else {mp.rmdirByPath(nodo, nodoAnterior, 1);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // rm1 ::= rm3 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1; if(option == 1){mp.rmById(RESULT, 1);} else {mp.rmByPath(nodo, nodoAnterior);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // rm2 ::= ALL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // rm3 ::= path 
            {
              String RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e2; option = 2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm3",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // rm3 ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1; option = 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm3",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cp ::= CP space cp1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cp1 ::= cp2 space cp3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cp1 ::= cp3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cp2 ::= ALL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cp3 ::= cp4 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp3",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cp4 ::= path 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp4",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cp4 ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp4",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cp5 ::= cp4 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp5",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rmdir ::= RMDIR space rmdir1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rmdir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rmdir1 ::= path 
            {
              String RESULT =null;
		mp.rmdirByPath(nodo, nodoAnterior, 0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rmdir1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // rmdir1 ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1; mp.rmById(RESULT, 0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rmdir1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rmdir1 ::= ACTUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rmdir1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rmdir1 ::= BACK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rmdir1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // chmod ::= CHMOD space RECURSIVE space chmod1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // chmod ::= CHMOD space chmod1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // chmod1 ::= chmod2 space chmod3 space chmod4 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // chmod2 ::= AGREGAR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // chmod2 ::= QUITAR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // chmod3 ::= r w x 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // chmod3 ::= w x r 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // chmod3 ::= x r w 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // chmod3 ::= r x w 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // chmod3 ::= w r x 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // chmod3 ::= x w r 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // chmod3 ::= r x 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // chmod3 ::= r w 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // chmod3 ::= w x 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // chmod3 ::= w r 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // chmod3 ::= x w 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // chmod3 ::= x r 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // chmod3 ::= x 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // chmod3 ::= r 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // chmod3 ::= w 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // chmod4 ::= path 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod4",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // chmod4 ::= ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod4",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // x ::= EXECUTE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("x",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // w ::= WRITE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("w",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // r ::= READ 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // path ::= path path1 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1 + e2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // path ::= path1 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // path1 ::= SLASH ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= e1 + e2;
			nodo = mp.getNode(e2, nodoAnterior, nodo, positionNode, option); positionNode++; nodoAnterior = e2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // space ::= space SPACE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("space",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // space ::= SPACE 
            {
              String RESULT =null;
		 positionNode = 1; nodoAnterior = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("space",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // exit ::= EXIT 
            {
              String RESULT =null;
		mp.exit();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
